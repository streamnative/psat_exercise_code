/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package solution.model;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Card extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Card\",\"namespace\":\"solution.model\",\"fields\":[{\"name\":\"start_time\",\"type\":\"string\",\"doc\":\"Time the card was played at\",\"default\":\"\"},{\"name\":\"game_id\",\"type\":\"string\",\"doc\":\"The unique ID of the game\",\"default\":\"\"},{\"name\":\"game_type\",\"type\":{\"type\":\"enum\",\"name\":\"GameTypes\",\"symbols\":[\"TexasHoldem\",\"Blackjack\",\"PaiGow\",\"FiveCardDraw\"]},\"doc\":\"Type of game the card was played in\",\"default\":\"TexasHoldem\"},{\"name\":\"suit\",\"type\":{\"type\":\"enum\",\"name\":\"Suit\",\"symbols\":[\"SPADE\",\"HEART\",\"DIAMOND\",\"CLUB\"]},\"doc\":\"The suit of the card\",\"default\":\"SPADE\"},{\"name\":\"card\",\"type\":\"string\",\"doc\":\"The card number\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Time the card was played at */
  @Deprecated public java.lang.CharSequence start_time;
  /** The unique ID of the game */
  @Deprecated public java.lang.CharSequence game_id;
  /** Type of game the card was played in */
  @Deprecated public solution.model.GameTypes game_type;
  /** The suit of the card */
  @Deprecated public solution.model.Suit suit;
  /** The card number */
  @Deprecated public java.lang.CharSequence card;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Card() {}

  /**
   * All-args constructor.
   */
  public Card(java.lang.CharSequence start_time, java.lang.CharSequence game_id, solution.model.GameTypes game_type, solution.model.Suit suit, java.lang.CharSequence card) {
    this.start_time = start_time;
    this.game_id = game_id;
    this.game_type = game_type;
    this.suit = suit;
    this.card = card;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return start_time;
    case 1: return game_id;
    case 2: return game_type;
    case 3: return suit;
    case 4: return card;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: start_time = (java.lang.CharSequence)value$; break;
    case 1: game_id = (java.lang.CharSequence)value$; break;
    case 2: game_type = (solution.model.GameTypes)value$; break;
    case 3: suit = (solution.model.Suit)value$; break;
    case 4: card = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'start_time' field.
   * Time the card was played at   */
  public java.lang.CharSequence getStartTime() {
    return start_time;
  }

  /**
   * Sets the value of the 'start_time' field.
   * Time the card was played at   * @param value the value to set.
   */
  public void setStartTime(java.lang.CharSequence value) {
    this.start_time = value;
  }

  /**
   * Gets the value of the 'game_id' field.
   * The unique ID of the game   */
  public java.lang.CharSequence getGameId() {
    return game_id;
  }

  /**
   * Sets the value of the 'game_id' field.
   * The unique ID of the game   * @param value the value to set.
   */
  public void setGameId(java.lang.CharSequence value) {
    this.game_id = value;
  }

  /**
   * Gets the value of the 'game_type' field.
   * Type of game the card was played in   */
  public solution.model.GameTypes getGameType() {
    return game_type;
  }

  /**
   * Sets the value of the 'game_type' field.
   * Type of game the card was played in   * @param value the value to set.
   */
  public void setGameType(solution.model.GameTypes value) {
    this.game_type = value;
  }

  /**
   * Gets the value of the 'suit' field.
   * The suit of the card   */
  public solution.model.Suit getSuit() {
    return suit;
  }

  /**
   * Sets the value of the 'suit' field.
   * The suit of the card   * @param value the value to set.
   */
  public void setSuit(solution.model.Suit value) {
    this.suit = value;
  }

  /**
   * Gets the value of the 'card' field.
   * The card number   */
  public java.lang.CharSequence getCard() {
    return card;
  }

  /**
   * Sets the value of the 'card' field.
   * The card number   * @param value the value to set.
   */
  public void setCard(java.lang.CharSequence value) {
    this.card = value;
  }

  /** Creates a new Card RecordBuilder */
  public static solution.model.Card.Builder newBuilder() {
    return new solution.model.Card.Builder();
  }
  
  /** Creates a new Card RecordBuilder by copying an existing Builder */
  public static solution.model.Card.Builder newBuilder(solution.model.Card.Builder other) {
    return new solution.model.Card.Builder(other);
  }
  
  /** Creates a new Card RecordBuilder by copying an existing Card instance */
  public static solution.model.Card.Builder newBuilder(solution.model.Card other) {
    return new solution.model.Card.Builder(other);
  }
  
  /**
   * RecordBuilder for Card instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Card>
    implements org.apache.avro.data.RecordBuilder<Card> {

    private java.lang.CharSequence start_time;
    private java.lang.CharSequence game_id;
    private solution.model.GameTypes game_type;
    private solution.model.Suit suit;
    private java.lang.CharSequence card;

    /** Creates a new Builder */
    private Builder() {
      super(solution.model.Card.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(solution.model.Card.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.start_time)) {
        this.start_time = data().deepCopy(fields()[0].schema(), other.start_time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.game_id)) {
        this.game_id = data().deepCopy(fields()[1].schema(), other.game_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.game_type)) {
        this.game_type = data().deepCopy(fields()[2].schema(), other.game_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.suit)) {
        this.suit = data().deepCopy(fields()[3].schema(), other.suit);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.card)) {
        this.card = data().deepCopy(fields()[4].schema(), other.card);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Card instance */
    private Builder(solution.model.Card other) {
            super(solution.model.Card.SCHEMA$);
      if (isValidValue(fields()[0], other.start_time)) {
        this.start_time = data().deepCopy(fields()[0].schema(), other.start_time);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.game_id)) {
        this.game_id = data().deepCopy(fields()[1].schema(), other.game_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.game_type)) {
        this.game_type = data().deepCopy(fields()[2].schema(), other.game_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.suit)) {
        this.suit = data().deepCopy(fields()[3].schema(), other.suit);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.card)) {
        this.card = data().deepCopy(fields()[4].schema(), other.card);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'start_time' field */
    public java.lang.CharSequence getStartTime() {
      return start_time;
    }
    
    /** Sets the value of the 'start_time' field */
    public solution.model.Card.Builder setStartTime(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.start_time = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'start_time' field has been set */
    public boolean hasStartTime() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'start_time' field */
    public solution.model.Card.Builder clearStartTime() {
      start_time = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'game_id' field */
    public java.lang.CharSequence getGameId() {
      return game_id;
    }
    
    /** Sets the value of the 'game_id' field */
    public solution.model.Card.Builder setGameId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.game_id = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'game_id' field has been set */
    public boolean hasGameId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'game_id' field */
    public solution.model.Card.Builder clearGameId() {
      game_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'game_type' field */
    public solution.model.GameTypes getGameType() {
      return game_type;
    }
    
    /** Sets the value of the 'game_type' field */
    public solution.model.Card.Builder setGameType(solution.model.GameTypes value) {
      validate(fields()[2], value);
      this.game_type = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'game_type' field has been set */
    public boolean hasGameType() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'game_type' field */
    public solution.model.Card.Builder clearGameType() {
      game_type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'suit' field */
    public solution.model.Suit getSuit() {
      return suit;
    }
    
    /** Sets the value of the 'suit' field */
    public solution.model.Card.Builder setSuit(solution.model.Suit value) {
      validate(fields()[3], value);
      this.suit = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'suit' field has been set */
    public boolean hasSuit() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'suit' field */
    public solution.model.Card.Builder clearSuit() {
      suit = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'card' field */
    public java.lang.CharSequence getCard() {
      return card;
    }
    
    /** Sets the value of the 'card' field */
    public solution.model.Card.Builder setCard(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.card = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'card' field has been set */
    public boolean hasCard() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'card' field */
    public solution.model.Card.Builder clearCard() {
      card = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Card build() {
      try {
        Card record = new Card();
        record.start_time = fieldSetFlags()[0] ? this.start_time : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.game_id = fieldSetFlags()[1] ? this.game_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.game_type = fieldSetFlags()[2] ? this.game_type : (solution.model.GameTypes) defaultValue(fields()[2]);
        record.suit = fieldSetFlags()[3] ? this.suit : (solution.model.Suit) defaultValue(fields()[3]);
        record.card = fieldSetFlags()[4] ? this.card : (java.lang.CharSequence) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
